generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @db.Date
  time        DateTime @db.Time(6)
  doctor_id   String   @db.Uuid
  patient_id  String   @db.Uuid
  hospital_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hospital    hospital @relation(fields: [hospital_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient     patient  @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model hospital {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medicine    medicine[]
  patient     patient[]
  test_report test_report[]
}

model medicine {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(255)
  quantity     Int
  expiry_date  DateTime @db.Date
  manufacturer String   @db.VarChar(255)
  hospital_id  String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  hospital     hospital @relation(fields: [hospital_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String        @db.VarChar(255)
  date_of_birth DateTime      @db.Date
  gender        String        @db.VarChar(255)
  address       String        @db.VarChar(255)
  phone_number  String        @db.VarChar(255)
  hospital_id   String        @db.Uuid
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  appointment   appointment[]
  hospital      hospital      @relation(fields: [hospital_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_report   test_report[]
}

model test_report {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  result      String   @db.VarChar(255)
  date        DateTime @db.Date
  patient_id  String   @db.Uuid
  doctor_id   String   @db.Uuid
  hospital_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hospital    hospital @relation(fields: [hospital_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient     patient  @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  hospital    hospital[]
  test_report test_report[]
}
